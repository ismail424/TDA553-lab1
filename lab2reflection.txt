1. Your design probably has a type called something like Car or Vehicle that is a supertype to both Volvo and Scania. What is the contract for gas() and brake() in this type? Do the implementations of gas() and brake() in both Volvo and Scania follow this contract? Does your design follow the Liskov Substitution Principle?

Answer: The contract for gas() and brake() is that they both are void, and neither of them throw any exceptions. Both Volvo and Scania's gas() and brake() functions are part of the parent class Vehicle, and do not differ in implementation - therefore, our design follows the Liskov Substitution Principle.


2. How did you handle duplicated code between Scania, the car transporters and the repair shops? Explain how you decided when to use subclassing and when to use composition and delegation.



3. Did you need to modify the design from lab 1 in order to make these extensions? If so, how could you have noticed that your design from Lab 1 did not follow the Open-Closed Principle before you started working on Lab 2?

